// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.


#include "stdafx.h"
#include "mk30comm.h"

/////////////////////////////////////////////////////////////////////////////
// CMk30Comm

IMPLEMENT_DYNCREATE(CMk30Comm, CWnd)

/////////////////////////////////////////////////////////////////////////////
// CMk30Comm properties

CString CMk30Comm::GetPassword()
{
	CString result;
	GetProperty(0x1, VT_BSTR, (void*)&result);
	return result;
}

void CMk30Comm::SetPassword(LPCTSTR propVal)
{
	SetProperty(0x1, VT_BSTR, propVal);
}

CString CMk30Comm::GetRasPassword()
{
	CString result;
	GetProperty(0x2, VT_BSTR, (void*)&result);
	return result;
}

void CMk30Comm::SetRasPassword(LPCTSTR propVal)
{
	SetProperty(0x2, VT_BSTR, propVal);
}

CString CMk30Comm::GetRasUserName()
{
	CString result;
	GetProperty(0x3, VT_BSTR, (void*)&result);
	return result;
}

void CMk30Comm::SetRasUserName(LPCTSTR propVal)
{
	SetProperty(0x3, VT_BSTR, propVal);
}

CString CMk30Comm::GetUserName()
{
	CString result;
	GetProperty(0x4, VT_BSTR, (void*)&result);
	return result;
}

void CMk30Comm::SetUserName(LPCTSTR propVal)
{
	SetProperty(0x4, VT_BSTR, propVal);
}

CString CMk30Comm::GetMyComputer()
{
	CString result;
	GetProperty(0x5, VT_BSTR, (void*)&result);
	return result;
}

void CMk30Comm::SetMyComputer(LPCTSTR propVal)
{
	SetProperty(0x5, VT_BSTR, propVal);
}

short CMk30Comm::GetMachineStatus()
{
	short result;
	GetProperty(0x6, VT_I2, (void*)&result);
	return result;
}

void CMk30Comm::SetMachineStatus(short propVal)
{
	SetProperty(0x6, VT_I2, propVal);
}

BOOL CMk30Comm::GetPowerOn()
{
	BOOL result;
	GetProperty(0x7, VT_BOOL, (void*)&result);
	return result;
}

void CMk30Comm::SetPowerOn(BOOL propVal)
{
	SetProperty(0x7, VT_BOOL, propVal);
}

CString CMk30Comm::GetVersion()
{
	CString result;
	GetProperty(0x8, VT_BSTR, (void*)&result);
	return result;
}

void CMk30Comm::SetVersion(LPCTSTR propVal)
{
	SetProperty(0x8, VT_BSTR, propVal);
}

CString CMk30Comm::GetFtpUserName()
{
	CString result;
	GetProperty(0x2b, VT_BSTR, (void*)&result);
	return result;
}

void CMk30Comm::SetFtpUserName(LPCTSTR propVal)
{
	SetProperty(0x2b, VT_BSTR, propVal);
}

CString CMk30Comm::GetFtpPassword()
{
	CString result;
	GetProperty(0x2c, VT_BSTR, (void*)&result);
	return result;
}

void CMk30Comm::SetFtpPassword(LPCTSTR propVal)
{
	SetProperty(0x2c, VT_BSTR, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// CMk30Comm operations

short CMk30Comm::Connect(LPCTSTR strMachineName)
{
	short result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x9, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		strMachineName);
	return result;
}

short CMk30Comm::DeleteFile(LPCTSTR strFileName)
{
	short result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0xa, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		strFileName);
	return result;
}

void CMk30Comm::Disconnect()
{
	InvokeHelper(0xb, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

short CMk30Comm::Execute(LPCTSTR strCommand)
{
	short result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0xc, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		strCommand);
	return result;
}

BOOL CMk30Comm::GetHistory(BSTR* strHistory)
{
	BOOL result;
	static BYTE parms[] =
		VTS_PBSTR;
	InvokeHelper(0xd, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		strHistory);
	return result;
}

short CMk30Comm::GetLastError()
{
	short result;
	InvokeHelper(0xe, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
	return result;
}

void CMk30Comm::LogEnd()
{
	InvokeHelper(0xf, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

BOOL CMk30Comm::LogStart()
{
	BOOL result;
	InvokeHelper(0x10, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL CMk30Comm::GetOffset(BSTR* strOffset)
{
	BOOL result;
	static BYTE parms[] =
		VTS_PBSTR;
	InvokeHelper(0x11, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		strOffset);
	return result;
}

void CMk30Comm::Pause(BOOL blnPause)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x12, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 blnPause);
}

short CMk30Comm::SendEmKey(LPCTSTR strKey)
{
	short result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x13, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		strKey);
	return result;
}

short CMk30Comm::SendFile(LPCTSTR strFileName)
{
	short result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x14, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		strFileName);
	return result;
}

long CMk30Comm::GetVoltage()
{
	long result;
	InvokeHelper(0x15, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}

long CMk30Comm::GetElectricity()
{
	long result;
	InvokeHelper(0x16, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}

long CMk30Comm::GetFrequency()
{
	long result;
	InvokeHelper(0x17, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}

long CMk30Comm::GetFSpeed()
{
	long result;
	InvokeHelper(0x18, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}

long CMk30Comm::GetMaxFrequency()
{
	long result;
	InvokeHelper(0x19, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}

long CMk30Comm::GetSigOnMaxFrequency()
{
	long result;
	InvokeHelper(0x1a, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}

long CMk30Comm::GetResistivity1()
{
	long result;
	InvokeHelper(0x1b, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}

long CMk30Comm::GetResistivity2()
{
	long result;
	InvokeHelper(0x1c, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}

long CMk30Comm::GetInch()
{
	long result;
	InvokeHelper(0x1d, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}

long CMk30Comm::GetDigit()
{
	long result;
	InvokeHelper(0x1e, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}

long CMk30Comm::GetCoordSys()
{
	long result;
	InvokeHelper(0x1f, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}

long CMk30Comm::GetCoordOrg(long nCoordSys, double* pdblCoord)
{
	long result;
	static BYTE parms[] =
		VTS_I4 VTS_PR8;
	InvokeHelper(0x20, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		nCoordSys, pdblCoord);
	return result;
}

long CMk30Comm::GetMachCoord(double* pdblCoord)
{
	long result;
	static BYTE parms[] =
		VTS_PR8;
	InvokeHelper(0x21, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		pdblCoord);
	return result;
}

long CMk30Comm::GetCoord(long nCoordSys, double* pdblCoord)
{
	long result;
	static BYTE parms[] =
		VTS_I4 VTS_PR8;
	InvokeHelper(0x22, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		nCoordSys, pdblCoord);
	return result;
}

BOOL CMk30Comm::GetCondition(BSTR* strCondition)
{
	BOOL result;
	static BYTE parms[] =
		VTS_PBSTR;
	InvokeHelper(0x23, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		strCondition);
	return result;
}

BOOL CMk30Comm::GetMachineKind(long* mainKind, long* subKind)
{
	BOOL result;
	static BYTE parms[] =
		VTS_PI4 VTS_PI4;
	InvokeHelper(0x24, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		mainKind, subKind);
	return result;
}

short CMk30Comm::GetConditionType()
{
	short result;
	InvokeHelper(0x25, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
	return result;
}

short CMk30Comm::CreateNcCond(short nParamType, short DatabaseType, double* cnd, double* mchcon, double* mcb, double* ncProc, long* plnNcProcNum, long* fin, long* plnMTRL)
{
	short result;
	static BYTE parms[] =
		VTS_I2 VTS_I2 VTS_PR8 VTS_PR8 VTS_PR8 VTS_PR8 VTS_PI4 VTS_PI4 VTS_PI4;
	InvokeHelper(0x26, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		nParamType, DatabaseType, cnd, mchcon, mcb, ncProc, plnNcProcNum, fin, plnMTRL);
	return result;
}

long CMk30Comm::GetHiVersion(BSTR* pstrHiVersion)
{
	long result;
	static BYTE parms[] =
		VTS_PBSTR;
	InvokeHelper(0x27, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		pstrHiVersion);
	return result;
}

long CMk30Comm::GetRunningFileName(BSTR* pstrRunningFileName, long* pFilePathType)
{
	long result;
	static BYTE parms[] =
		VTS_PBSTR VTS_PI4;
	InvokeHelper(0x28, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		pstrRunningFileName, pFilePathType);
	return result;
}

long CMk30Comm::GetRunningMainNcFileFirstLine(BSTR* pstrFirstLine)
{
	long result;
	static BYTE parms[] =
		VTS_PBSTR;
	InvokeHelper(0x29, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		pstrFirstLine);
	return result;
}

long CMk30Comm::GetNcFileRunEventTime(BSTR* pstrPrevEventTime, BSTR* pstrCurrentEventTime)
{
	long result;
	static BYTE parms[] =
		VTS_PBSTR VTS_PBSTR;
	InvokeHelper(0x2a, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		pstrPrevEventTime, pstrCurrentEventTime);
	return result;
}

short CMk30Comm::FtpSendFile(LPCTSTR strFileName)
{
	short result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x2d, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		strFileName);
	return result;
}

long CMk30Comm::GetCurrentLogonUserInfo(BSTR* pstrUserLoginName, BSTR* pstrUserName, BSTR* pstrUserNo, long* pUserLevel)
{
	long result;
	static BYTE parms[] =
		VTS_PBSTR VTS_PBSTR VTS_PBSTR VTS_PI4;
	InvokeHelper(0x2e, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		pstrUserLoginName, pstrUserName, pstrUserNo, pUserLevel);
	return result;
}

long CMk30Comm::FarLogout(long* pError)
{
	long result;
	static BYTE parms[] =
		VTS_PI4;
	InvokeHelper(0x2f, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		pError);
	return result;
}

long CMk30Comm::FarLogon(LPCTSTR strUserNo, LPCTSTR strPasswrod, long* pError)
{
	long result;
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR VTS_PI4;
	InvokeHelper(0x30, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		strUserNo, strPasswrod, pError);
	return result;
}

long CMk30Comm::GetUserLogonInfFile(LPCTSTR lpLocalFileFullPath)
{
	long result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x31, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		lpLocalFileFullPath);
	return result;
}

long CMk30Comm::GetMachineLock()
{
	long result;
	InvokeHelper(0x32, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}

long CMk30Comm::GetOffsetVar(long nOffsetNumber, double* dblOffsetValue)
{
	long result;
	static BYTE parms[] =
		VTS_I4 VTS_PR8;
	InvokeHelper(0x33, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		nOffsetNumber, dblOffsetValue);
	return result;
}

long CMk30Comm::SetMacroVar(long nMacroNumber, double dblMacroValue)
{
	long result;
	static BYTE parms[] =
		VTS_I4 VTS_R8;
	InvokeHelper(0x34, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		nMacroNumber, dblMacroValue);
	return result;
}

long CMk30Comm::GetMacroVar(long nMacroNumber, double* dblMacroValue)
{
	long result;
	static BYTE parms[] =
		VTS_I4 VTS_PR8;
	InvokeHelper(0x35, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		nMacroNumber, dblMacroValue);
	return result;
}

long CMk30Comm::GetMacroVarRange(long nStartNo, long nEndNo, double* dblMacro)
{
	long result;
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_PR8;
	InvokeHelper(0x36, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		nStartNo, nEndNo, dblMacro);
	return result;
}

long CMk30Comm::GetMacroVarRangeSafeArray(long nStartNo, long nEndNo, VARIANT* varMacro)
{
	long result;
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_PVARIANT;
	InvokeHelper(0x37, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		nStartNo, nEndNo, varMacro);
	return result;
}

long CMk30Comm::SetMacroVarRange(long nStartNo, long nEndNo, double* dblMacro)
{
	long result;
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_PR8;
	InvokeHelper(0x38, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		nStartNo, nEndNo, dblMacro);
	return result;
}

long CMk30Comm::SetMacroVarRangeSafeArray(long nStartNo, long nEndNo, VARIANT* varMacro)
{
	long result;
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_PVARIANT;
	InvokeHelper(0x39, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		nStartNo, nEndNo, varMacro);
	return result;
}

void CMk30Comm::AboutBox()
{
	InvokeHelper(0xfffffdd8, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}
